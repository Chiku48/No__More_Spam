import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report


df = pd.read_csv("C:/Users/saura/Downloads/spam/spam.csv", encoding='ISO-8859-1')

df = df[['v1', 'v2']]  # Select relevant columns
df.columns = ['label', 'message']  # Rename columns for clarity

df = df[['v1', 'v2']]  
df.columns = ['label', 'message'] 

X_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2, random_state=42)
tfidf = TfidfVectorizer(stop_words='english', max_df=0.9)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)
y_pred = model.predict(X_test_tfidf)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

def predict_spam(message):
    message_tfidf = tfidf.transform([message])
    prediction = model.predict(message_tfidf)
    return 'Spam' if prediction[0] == 1 else 'Not Spam'
check_message=input("Enter the message to check:")
print("Prediction for new message:", predict_spam(check_message))
