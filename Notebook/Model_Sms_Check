import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

df = pd.read_csv("C:/Users/saura/Downloads/spam/spam.csv", encoding='ISO-8859-1')
df = df[['v1', 'v2']]
# Renaming columns
df.columns = ['label', 'message']  
print(df.head())

df['label'] = df['label'].map({'ham': 0, 'spam': 1}) 
# Changing text to lowercase
df['message'] = df['message'].str.lower()  

X = df['message']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Feature Extraction using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english')
X_train_transformed = vectorizer.fit_transform(X_train)
X_test_transformed = vectorizer.transform(X_test)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_transformed, y_train)

y_pred = model.predict(X_test_transformed)
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print("Classification Report:\n", classification_report(y_test, y_pred))

def predict_spam(message):
    message = [message.lower()]
    message_transformed = vectorizer.transform(message)
    prediction = model.predict(message_transformed)
    return "Spam" if prediction[0] == 1 else "Not Spam"


check_message=input("Enter the message to check:")
print("Prediction for new message:****----____", predict_spam(check_message),end="")
print("____----****")


